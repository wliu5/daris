/* Generated By:JavaCC: Do not edit this line. AssetPathCompiler.java */
package daris.plugin.asset.path;
import java.io.ByteArrayInputStream;
import arc.mf.plugin.ServiceExecutor;
import arc.xml.XmlDoc;
import nig.mf.pssd.CiteableIdUtil;

public class AssetPathCompiler implements AssetPathCompilerConstants {
  public static String compile(ServiceExecutor executor, String assetId, String expr) throws Throwable
  {
    XmlDoc.Element ae = AssetPathUtils.getAssetMeta(executor, assetId);
    return compile(executor, ae, expr);
  }

  public static String compile(String cid, ServiceExecutor executor, String expr) throws Throwable
  {
    XmlDoc.Element ae = AssetPathUtils.getAssetMeta(cid, executor);
    return compile(executor, ae, expr);
  }

  public static String compile(ServiceExecutor executor, XmlDoc.Element ae, String expr) throws Throwable
  {
    return new AssetPathCompiler(executor, ae, expr).compile();
  }

  private ServiceExecutor _executor;

  private XmlDoc.Element _ae;

  public AssetPathCompiler(ServiceExecutor executor, XmlDoc.Element ae, String s)
  {
    this (new ByteArrayInputStream(s.getBytes()));
    _executor = executor;
    _ae = ae;
  }

  public static void main(String args []) throws ParseException
  {
    AssetPathCompiler parser = new AssetPathCompiler(System.in);
    while (true)
    {
      System.out.println(parser.compile());
    }
  }

  final public String compile() throws ParseException {
  String r;
    r = path();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public String path() throws ParseException {
  StringBuilder sb = new StringBuilder();
  String v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SLASH:
      jj_consume_token(SLASH);
      sb.append("/");
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    v = expression();
    sb.append(v);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(SLASH);
      v = expression();
      sb.append("/").append(v);
    }
    {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String expression() throws ParseException {
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CID:
      s = cid();
      break;
    case XVALUE:
      s = xvalue();
      break;
    case PVALUE:
      s = pvalue();
      break;
    case RVALUE:
      s = rvalue();
      break;
    case STRING:
      s = svalue();
      break;
    case REPLACE:
      s = replace();
      break;
    case JOIN:
      s = join();
      break;
    case OPT:
      s = opt();
      break;
    case IF_NULL:
      s = ifNull();
      break;
    case UNLESS_NULL:
      s = unlessNull();
      break;
    case SAFE_NAME:
      s = safeName();
      break;
    case SAFE_PATH:
      s = safePath();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String cid() throws ParseException {
  int idx1;
  int idx2;
    jj_consume_token(CID);
    jj_consume_token(LPAREN);
    idx1 = integer();
    jj_consume_token(COMMA);
    idx2 = integer();
    jj_consume_token(RPAREN);
    String cid = null;
    try
    {
      cid = _ae.value("cid");
    }
    catch (Throwable e)
    {
      e.printStackTrace(System.err);
    }
    if (cid != null)
    {
      String [ ] parts = cid.split("\u005c\u005c.");
      if (parts == null || parts.length == 1)
      {
        {if (true) return cid;}
      }
      int len = parts.length;
      int from = idx1 < 0 ? (len + idx1) : idx1;
      int to = idx2 <= 0 ? (len + idx2) : idx2;
      StringBuilder sb = new StringBuilder();
      for (int i = from; i < to; i++)
      {
        if (i > from)
        {
          sb.append('.');
        }
        sb.append(parts [ i ]);
      }
      {if (true) return sb.toString();}
    }
    {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  final public int integer() throws ParseException {
  Token t;
  int i;
  boolean negtive = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      jj_consume_token(24);
    negtive = true;
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    t = jj_consume_token(POSITIVE_INTEGER);
    i = Integer.parseInt(t.image);
    if (negtive)
    {
      i = i * (- 1);
    }
    {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public String svalue() throws ParseException {
  Token t;
  String s;
    t = jj_consume_token(STRING);
    s = t.image;
    {if (true) return s.substring(1, s.length() - 1);}
    throw new Error("Missing return statement in function");
  }

  final public String xvalue() throws ParseException {
  String xpath;
  String defaultValue = null;
  String value = "";
    jj_consume_token(XVALUE);
    jj_consume_token(LPAREN);
    xpath = svalue();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      defaultValue = expression();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    try
    {
      value = _ae.stringValue(xpath, defaultValue);
    }
    catch (Throwable e)
    {
      e.printStackTrace(System.err);
    }
    {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public String pvalue() throws ParseException {
  Token t;
  int depth;
  String xpath;
  String defaultValue = null;
    jj_consume_token(PVALUE);
    jj_consume_token(LPAREN);
    t = jj_consume_token(POSITIVE_INTEGER);
    depth = Integer.parseInt(t.image);
    jj_consume_token(COMMA);
    xpath = svalue();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      defaultValue = expression();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    String value = AssetPathUtils.getParentMetadataValue(_executor, _ae, depth, xpath, defaultValue);
    if (value != null)
    {
      {if (true) return value;}
    }
    else
    {
      {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  final public String rvalue() throws ParseException {
  String type;
  String xpath;
  String defaultValue = null;
    jj_consume_token(RVALUE);
    jj_consume_token(LPAREN);
    type = svalue();
    jj_consume_token(COMMA);
    xpath = svalue();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      defaultValue = expression();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    String value = AssetPathUtils.getRelatedMetadataValue(_executor, _ae, type, xpath, defaultValue);
    if (value != null)
    {
      {if (true) return value;}
    }
    else
    {
      {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  final public String replace() throws ParseException {
  String s;
  String m;
  String r;
    jj_consume_token(REPLACE);
    jj_consume_token(LPAREN);
    s = expression();
    jj_consume_token(COMMA);
    m = svalue();
    jj_consume_token(COMMA);
    r = svalue();
    jj_consume_token(RPAREN);
    {if (true) return s.replace(m, r);}
    throw new Error("Missing return statement in function");
  }

  final public String join() throws ParseException {
  String s;
  StringBuilder sb = new StringBuilder();
    jj_consume_token(JOIN);
    jj_consume_token(LPAREN);
    s = expression();
    sb.append(s);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      s = expression();
      sb.append(s);
    }
    jj_consume_token(RPAREN);
    {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String opt() throws ParseException {
  String s;
  String v = "";
    jj_consume_token(OPT);
    jj_consume_token(LPAREN);
    s = expression();
    if (v.isEmpty() && s != null && !s.isEmpty())
    {
      v = s;
      {if (true) return v;}
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      s = expression();
      if (v.isEmpty() && s != null && !s.isEmpty())
      {
        v = s;
        {if (true) return v;}
      }
    }
    jj_consume_token(RPAREN);
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public String ifNull() throws ParseException {
  String s = "";
  String v = "";
    jj_consume_token(IF_NULL);
    jj_consume_token(LPAREN);
    s = expression();
    jj_consume_token(COMMA);
    v = expression();
    jj_consume_token(RPAREN);
    if (s == null || s.isEmpty())
    {
      {if (true) return v;}
    }
    else
    {
      {if (true) return s;}
    }
    throw new Error("Missing return statement in function");
  }

  final public String unlessNull() throws ParseException {
  String s = "";
  String v = "";
    jj_consume_token(UNLESS_NULL);
    jj_consume_token(LPAREN);
    s = expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      v = expression();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    if (v == null || v.isEmpty())
    {
      {if (true) return s;}
    }
    else
    {
      {if (true) return v;}
    }
    throw new Error("Missing return statement in function");
  }

  final public String safeName() throws ParseException {
  String s;
    jj_consume_token(SAFE_NAME);
    jj_consume_token(LPAREN);
    s = expression();
    jj_consume_token(RPAREN);
    s = s == null ? "" : s;
    s = s.trim().replaceAll("\u005c\u005c +", " ").replaceAll("[^a-zA-Z0-9\u005c\u005c.\u005c\u005c-\u005c\u005c ]", "_").replaceAll("_+", "_");
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String safePath() throws ParseException {
  String s;
    jj_consume_token(SAFE_PATH);
    jj_consume_token(LPAREN);
    s = expression();
    jj_consume_token(RPAREN);
    s = s == null ? "" : s;
    s = s.trim().replaceAll("\u005c\u005c +", " ").replaceAll("[^a-zA-Z0-9\u005c\u005c.\u005c\u005c-\u005c\u005c \u005c\u005c/]", "_").replaceAll("_+", "_");
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public AssetPathCompilerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x21,0x400000,0x400000,0x3ffc0,0x1000000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,};
   }

  /** Constructor with InputStream. */
  public AssetPathCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AssetPathCompiler(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AssetPathCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AssetPathCompiler(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AssetPathCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AssetPathCompiler(AssetPathCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AssetPathCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
